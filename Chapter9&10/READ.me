play <- function() {
  
  # step 1: generate symbols
  symbols <- get_symbols()
  
  # step 2: display the symbols
  print(symbols)
  
  # step 3: score the symbols
  score(symbols)
}

num <- -2

if (num < 0) {
  num <- num * -1
}

num
## 2

num <- 4

if (num < 0) {
  num <- num * -1
}

num
## 4

num <- -1

if (num < 0) {
  print("num is negative.")
  print("Don't worry, I'll fix it.")
  num <- num * -1
  print("Now num is positive.")
}
## "num is negative."
## "Don't worry, I'll fix it."
## "Now num is positive."

num
## 1

a <- 3.14
dec <- a - trunc(a)
dec
## 0.14

if (dec >= 0.5) {
  a <- trunc(a) + 1
} else {
  a <- trunc(a)
}

a
## 3

a <- 1
b <- 1

if (a > b) {
  print("A wins!")
} else if (a < b) {
  print("B wins!")
} else {
  print("Tie.")
}
## "Tie."

score <- function(symbols) {
  
  # calculate a prize
  
  prize
}

symbols <- c("7", "7", "7")

symbols <- c("B", "BB", "BBB")
symbols <- c("C", "DD", "0")

length(unique(symbols) == 1)

symbols <- c("B", "BBB", "BB")

all(symbols %in% c("B", "BB", "BBB"))
## TRUE


if (same) {
  symbol <- symbols[1]
  if (symbol == "DD") {
    prize <- 800
  } else if (symbol == "7") {
    prize <- 80
  } else if (symbol == "BBB") {
    prize <- 40
  } else if (symbol == "BB") {
    prize <- 5
  } else if (symbol == "B") {
    prize <- 10
  } else if (symbol == "C") {
    prize <- 10
  } else if (symbol == "0") {
    prize <- 0
  }
}


payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, 
             "B" = 10, "C" = 10, "0" = 0)
payouts
##  DD   7 BBB  BB   B   C   0 
## 100  80  40  25  10  10   0 

payouts["DD"]
##  DD 
## 100 

payouts["B"]
##  B
## 10


unname(payouts["DD"])
## 100 

symbols <- c("7", "7", "7")
symbols[1]
## "7"

payouts[symbols[1]]
##  7 
## 80 

symbols <- c("C", "C", "C")
payouts[symbols[1]]
##  C 
## 10 



symbols <- c("C", "DD", "C")
symbols == "C"
## TRUE FALSE  TRUE
sum(symbols == "C")
## 2
sum(symbols == "DD")
## 1

same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")

c(0, 2, 5)

cherries + 1
## 1

c(0, 2, 5)[cherries + 1]
## 0
cherries + 1
## 2

c(0, 2, 5)[cherries + 1]
## 2
cherries + 1
## 3

c(0, 2, 5)[cherries + 1]
## 5

same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")

if (same) {
  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, 
               "B" = 10, "C" = 10, "0" = 0)
  prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
  prize <- 5
} else {
  cherries <- sum(symbols == "C")
  prize <- c(0, 2, 5)[cherries + 1]
}

diamonds <- sum(symbols == "DD")
# double the prize if necessary

same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")

if (same) {
  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, 
               "B" = 10, "C" = 10, "0" = 0)
  prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
  prize <- 5
} else {
  cherries <- sum(symbols == "C")
  prize <- c(0, 2, 5)[cherries + 1]
}

diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds

# identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")

# get prize
if (same) {
  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, 
               "B" = 10, "C" = 10, "0" = 0)
  prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
  prize <- 5
} else {
  cherries <- sum(symbols == "C")
  prize <- c(0, 2, 5)[cherries + 1]
}

# adjust for diamonds
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds

score <- function (symbols) {
  # identify case
  same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
  bars <- symbols %in% c("B", "BB", "BBB")
  
  # get prize
  if (same) {
    payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, 
                 "B" = 10, "C" = 10, "0" = 0)
    prize <- unname(payouts[symbols[1]])
  } else if (all(bars)) {
    prize <- 5
  } else {
    cherries <- sum(symbols == "C")
    prize <- c(0, 2, 5)[cherries + 1]
  }
  
  # adjust for diamonds
  diamonds <- sum(symbols == "DD")
  prize * 2 ^ diamonds
}

play <- function() {
  symbols <- get_symbols()
  print(symbols)
  score(symbols)
}

play()
## "0"  "BB" "B" 
## 0

play()
## "DD"  "0" "B"  
## 0

play()
## "BB" "BB" "B" 
## 25




play()
## 0 0 DD
## $0

  play()
## "0"  "0" "DD" 
## 0

  one_play <- play()
## "B" "0" "B" 

one_play
## 0


num <- 1000000000
print(num)
## 1000000000

  class(num) <- c("POSIXct", "POSIXt")
print(num)
## "2001-09-08 19:46:40 CST"

one_play <- play()
one_play
## 0

attributes(one_play)
## NULL

attr(one_play, "symbols") <- c("B", "0", "B")

attributes(one_play)
## $symbols
## [1] "B" "0" "B"

attr(one_play, "symbols")
## "B" "0" "B"

one_play
## [1] 0
## attr(,"symbols")
## [1] "B" "0" "B"

one_play + 1
##  1
## attr(,"symbols")
##  "B" "0" "B"

play()
## [1] 0
## attr(,"symbols")
## [1] "B"  "BB" "0" 

two_play <- play()

two_play
## [1] 0
## attr(,"symbols")
## [1] "0" "B" "0"

play <- function() {
  symbols <- get_symbols()
  structure(score(symbols), symbols = symbols)
}

three_play <- play()
three_play
##  0
##  attr(,"symbols")
##  "0"  "BB" "B" 

symbols <- attr(one_play, "symbols")

symbols
## "B" "0" "B"

symbols <- paste(symbols, collapse = " ")

symbols
## "B 0 B"

prize <- one_play
string <- paste(symbols, prize, sep = "\n$")

string
## "B 0 B\n$0"

cat(string)
## B 0 B
## $0


num <- 1000000000
print(num)
## 1000000000

class(num) <- c("POSIXct", "POSIXt")
print(num)
## "2001-09-08 19:46:40 CST"

class(one_play) <- "slots"

args(print)
## function (x, ...) 
## NULL

print.slots <- function(x, ...) {
  cat("I'm using the print.slots method")
}

print(one_play)
## I'm using the print.slots method

one_play
## I'm using the print.slots method

rm(print.slots)

now <- Sys.time()
attributes(now)
## $class
## [1] "POSIXct" "POSIXt" 

play1 <- play()
play1
## B BBB BBB
## $5

play2 <- play()
play2
## 0 B 0
## $0

c(play1, play2)
## [1] 5 0

play1[1]
## [1] 5

